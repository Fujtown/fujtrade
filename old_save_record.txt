app.post('/fetch-and-save-data', async (req, res) => {
  const ch_id = await getLastInsertedDocument(req);
  // console.log(ch_id);
  req.session.ch_id = ch_id;
  let requestBody = {
    period: { date: { from: '', to: '' }, type: '1' },
    limit: '50'
};

// Check if ch_id is set in the session and not empty
if (req.session.ch_id && req.session.ch_id.trim() !== '') {
    requestBody.starting_after = req.session.ch_id;
}
// console.log(requestBody);
// process.exit(1);
  const options = {
      method: 'POST',
      headers: {
          accept: 'application/json',
          'content-type': 'application/json',
          Authorization: 'Bearer sk_live_LKysFd5ZAueoOrhkCzmMDnRE'
      },
      body: JSON.stringify(requestBody)
  };

  try {
      const response = await fetch('https://api.tap.company/v2/charges/list', options);
      const apiData = await response.json();
      const now = new Date();
      // console.log(data)
      if (!apiData || !apiData.charges || !Array.isArray(apiData.charges)) {
        throw new Error("Invalid data format received from API");
    }
      // Assuming data is an array of items to be saved in Firestore
      const firestore = admin.firestore();
      const batch = firestore.batch();
          // Get the current max tr_id
          const lastDoc = await firestore.collection('all_tap_payment')
          .orderBy('tr_id', 'desc')
          .limit(1)
          .get();

      let maxTrId = 0;
      if (!lastDoc.empty) {
          maxTrId = lastDoc.docs[0].data().tr_id || 1;
      }

      Promise.all(apiData.charges.map(async (charge) => {
        const docRef = firestore.collection('all_tap_payment').doc(charge.id);
       
        const doc = await docRef.get();
        if (!doc.exists) {
          maxTrId++;  // Increment tr_id for each new document    
        const formattedRecord = {
          tr_id: maxTrId,
          date: charge.transaction?.created,
          ch_id: charge.id,
          track: charge.reference?.track || 'defaultTrack',
          payment: charge.reference?.payment,
          receipt: charge.receipt?.id,
          amount: charge.amount,
          currency: charge.currency,
          status: charge.status,
          code: charge.response?.code,
          message: charge.response?.message,
          brand: charge.card?.brand || 'defaultBrand',
          first_name: charge.customer?.first_name,
          last_name: charge.customer?.last_name || charge.customer?.first_name,
          customer_id: charge.customer?.id || '---',
          email: charge.customer?.email,
          country_code: charge.customer?.phone?.country_code,
          number: charge.customer?.phone?.number,
          invoice_id: charge.metadata?.invoice_id,
          createdAt: admin.firestore.Timestamp.fromDate(now)
      };
    
            return docRef.set(formattedRecord);
        }
        else{

          res.send('All Record Fetch Successfully');
        }
       
    }))
    .then(() => {
        res.send('Data fetched and saved/updated successfully');
    })
    .catch((err) => {
        console.error('Error fetching or saving data:', err);
        res.status(500).send('Error fetching or saving data');
    });

  } catch (err) {
      console.error('Error fetching or saving data:', err);
      res.status(500).send('Error fetching or saving data');
  }
});
